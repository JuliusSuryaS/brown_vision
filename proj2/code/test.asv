
%% 1) Load stuff
% There are numerous other image sets in the supplementary data on the
% project web page. You can simply download images off the Internet, as
% well. However, the evaluation function at the bottom of this script will
% only work for three particular image pairs (unless you add ground truth
% annotations for other image pairs). It is suggested that you only work
% with the two Notre Dame images until you are satisfied with your
% implementation and ready to test on additional images. A single scale
% pipeline works fine for these two images (and will give you full credit
% for this project), but you will need local features at multiple scales to
% handle harder cases.
image1 = imread('../data/Notre Dame/921919841_a30df938f2_o.jpg');
image2 = imread('../data/Notre Dame/4191453057_c86028ce1f_o.jpg');
eval_file = '../data/Notre Dame/921919841_a30df938f2_o_to_4191453057_c86028ce1f_o.mat';

% %This pair is relatively easy (still harder than Notre Dame, though)
% image1 = imread('../data/Mount Rushmore/9021235130_7c2acd9554_o.jpg');
% image2 = imread('../data/Mount Rushmore/9318872612_a255c874fb_o.jpg');
% eval_file = '../data/Mount Rushmore/9021235130_7c2acd9554_o_to_9318872612_a255c874fb_o.mat';

% %This pair is relatively difficult
% image1 = imread('../data/Episcopal Gaudi/4386465943_8cf9776378_o.jpg');
% image2 = imread('../data/Episcopal Gaudi/3743214471_1b5bbfda98_o.jpg');
% eval_file = '../data/Episcopal Gaudi/4386465943_8cf9776378_o_to_3743214471_1b5bbfda98_o.mat';

image1 = single(image1)/255;
image2 = single(image2)/255;

%make images smaller to speed up the algorithm. This parameter gets passed
%into the evaluation code so don't resize the images except by changing
%this parameter.
scale_factor = 0.5; 
image1 = imresize(image1, scale_factor, 'bilinear');
image2 = imresize(image2, scale_factor, 'bilinear');

% You don't have to work with grayscale images. Matching with color
% information might be helpful.
image1_bw = rgb2gray(image1);
image2_bw = rgb2gray(image2);

feature_width = 16; %width and height of each local feature, in pixels. 

%% 2) Find distinctive points in each image. Szeliski 4.1.1
% !!! You will need to implement get_interest_points. !!!
[x1, y1] = get_interest_points(image1_bw, feature_width);

% figure, imshow(image1), axis image, hold on, plot(x1,y1,'r*')

% hold on
% plot(xpeak,ypeak,'rx','markersize',20)
% hold on
% plot(xoffset,yoffset,'bx','markersize',20)

% imtest = image1(x1(34):x1(34)+15,y1(34):y1(34)+15);
% imshow(imtest);
% imhist(imtest);

% put all detected features in matrices for convinience
imhold = zeros(16,16);
imnew =  zeros(16,16);
% for i = 1:size(x1)
%        imhold = image1(x1(i):x1(i)+15,y1(i):y1(i)+15); 
%        imnew = [imnew; imhold];
% end

vtempx = zeros(1,8);
vtemp = zeros(4,32);
v = zeros(1,128);

for i = 1:size(x1)
    imhold = image1(x1(i):x1(i)+15,y1(i):y1(i)+15);
    [gx gy] = imgradientxy(imhold,'prewitt');
    [gmag gdir] = imgradient(gx,gy);
    
    % gdir 16x16 -> get direction on 4 x 4 from gdir
    for m =  1 : 4 % 4 times loop starting point 1 5 9 13
        count1 = (m-1) * 4 + 1; % starting point m 1, 5, 9, 13
        for n = 1: 4
            count2 = (n-1) * 4 + 1; % starting point n 1, 5, 9, 13
            gnew = gdir(count1:count1+3,count2:count2+3); % 1-4, 5-8, 9-12, 13-16 
            gnew = gnew(:);
            gnew = gnew';
            vtempx = hist(gnew,[-180,-135,-90,-45,45,90,135,180]);
            
            % v gradient direction in histogram 4 x 4
            % 4 x (4x8) => histogram consists of 8 direction [-180 :45: 180]
            count3 = (n-1) * 8 + 1; % starting point 1, 9, 17, 25
            vtemp(m,count3:count3+7) = vtempx; % eq v(1,1:8), v(1,9:16) .. etc
            
            % v size = 4 x 32 for every interest point
            % note there are 128 interest point 
            
        end
        % resize vtemp into 128 vector array
        varr = (vtemp(:))';
    end
    
    % concate v  for every 128 interest point
    % later remove 1st matrix of v, for concation purpose
    v = [v; vtemp];
end

% remove first 1 x 128 matrix element of v(:4,1:32) -> zeros matrix 
v = v(2:size(v,1),:); 

% v 




% [gx gy] = imgradientxy(imnew(2049:2064,:),'prewitt');
% [gmag gdir] = imgradient(gx,gy);
% 
% gnew = gdir(1:8,1:8);
% gnew = gnew(:);
% gnew = gnew';
% 
% v = hist(gnew,[-180,-135,-90,-45,45,90,135,180])

